import {part1, part2, ring} from "../src/day1";

describe("ring", () => {
  test("returns index value when index is within bounds", () => {
    expect(ring([1, 2, 3])(1)).toBe(2);
  });

  test("returns modulus entry value when index is larger than collection length", () => {
    expect(ring([1, 2, 3])(3)).toBe(1);
  });

  test("returns appropriate entry value when index is negative", () => {
    expect(ring([1, 2, 3])(-1)).toBe(3);
  });
});

describe("part 1", () => {
  test("1122 should be 3", () => {
    expect(part1("1122")).toBe(3);
  });

  test("1111 should be 4", () => {
    expect(part1("1111")).toBe(4);
  });

  test("1234 should be 0", () => {
    expect(part1("1234")).toBe(0);
  });

  test("91212129 should be 9", () => {
    expect(part1("91212129")).toBe(9);
  });
});

describe("part 2", () => {
  test("1212 should be 6", () => {
    expect(part2("1212")).toBe(6);
  });

  test("1221 should be 0", () => {
    expect(part2("1221")).toBe(0);
  });

  test("123425 should be 4", () => {
    expect(part2("123425")).toBe(4);
  });

  test("123123 should be 12", () => {
    expect(part2("123123")).toBe(12);
  });

  test("12131415 should be 4", () => {
    expect(part2("12131415")).toBe(4);
  });
});

const input = ``;

console.log(`part 1: ${part1(input)}`);
console.log(`part 2: ${part2(input)}`);
